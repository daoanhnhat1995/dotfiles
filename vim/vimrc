"--------------------------------------------------------------------
" Nhat Dao ' s Vim config
"--------------------------------------------------------------------


set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin() 

"--------------------------------------------------------------------
" Using vundle for plugin management
" https://github.com/VundleVim/Vundle.vim
"--------------------------------------------------------------------
Plugin 'VundleVim/Vundle.vim'

"--------------------------------------------------------------------
"Interact with Git within vim, :Gstatus ...
"--------------------------------------------------------------------
Plugin 'tpope/vim-fugitive' 

"--------------------------------------------------------------------
"Surround tag utility
"--------------------------------------------------------------------
Plugin 'tpope/vim-surround' 

Plugin 'Yggdroot/indentLine'
Plugin 'prettier/vim-prettier', {
	\ 'do': 'yarn install',
	\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql'] }

Plugin 'kien/rainbow_parentheses.vim'


"--------------------------------------------------------------------
" Comment a block helper
" usage:
" > Comment out a line: gcc
" > Comment out a block: gcap
" > Comment out selected: gc
"--------------------------------------------------------------------
Plugin 'tomtom/tcomment_vim'               

"--------------------------------------------------------------------
" Auto map brackets as typing
"--------------------------------------------------------------------
Plugin 'tpope/vim-unimpaired'              

"--------------------------------------------------------------------
" Fuzzy search all files
"--------------------------------------------------------------------
Plugin 'mileszs/ack.vim'

"--------------------------------------------------------------------
" Ack enhancement
"--------------------------------------------------------------------
Plugin 'wincent/ferret'


"--------------------------------------------------------------------
" Allow using '.' to paste an action performed before
"--------------------------------------------------------------------
Bundle 'tpope/vim-repeat'

"--------------------------------------------------------------------
"Async Make
"--------------------------------------------------------------------
Bundle "tpope/vim-dispatch"

"--------------------------------------------------------------------
" Fuzzy file, buffer, mru and tag finder
"--------------------------------------------------------------------
Plugin 'kien/ctrlp.vim'                     

"--------------------------------------------------------------------
" Always highlight enclosing tags
" "--------------------------------------------------------------------
Plugin 'Valloric/MatchTagAlways'

"--------------------------------------------------------------------
" Display a nerd tree on the left side
" :NerdTree
"--------------------------------------------------------------------
Plugin 'scrooloose/nerdtree'

Plugin 'Raimondi/delimitMate'

"--------------------------------------------------------------------
" Utilities for Rails development
"--------------------------------------------------------------------
" Plugin 'tpope/vim-rails'                   

"--------------------------------------------------------------------
" Go utilties:
" GoImports : to auto include libraries 
" GoDoc : look up docs
" GoRun 
" ...
"--------------------------------------------------------------------
Plugin 'fatih/vim-go', { 'do': ':GoInstallBinaries' }


"--------------------------------------------------------------------
" Syntax checking
"--------------------------------------------------------------------
Plugin 'scrooloose/syntastic'
Plugin 'millermedeiros/vim-esformatter'

"--------------------------------------------------------------------
" Syntax enforcement for typescript
"--------------------------------------------------------------------
Plugin 'leafgarland/typescript-vim' "Support for typescript

"--------------------------------------------------------------------
" Navigate tmux sessions between vim
"--------------------------------------------------------------------
Plugin 'christoomey/vim-tmux-navigator'    

"--------------------------------------------------------------------
" Better git diff
"--------------------------------------------------------------------
Plugin 'airblade/vim-gitgutter'							


"--------------------------------------------------------------------
" Javascript syntax enforcement
"--------------------------------------------------------------------
Plugin 'pangloss/vim-javascript'

Bundle 'moll/vim-node'
"--------------------------------------------------------------------
" jsx syntax enforcement
"--------------------------------------------------------------------
Plugin 'mxw/vim-jsx'

"--------------------------------------------------------------------
" Colors and themese
"--------------------------------------------------------------------
Bundle 'altercation/vim-colors-solarized'
Bundle 'jackiehluo/vim-material'
Bundle 'morhetz/gruvbox'
Bundle 'dracula/vim'

"--------------------------------------------------------------------
" Display line status at the bottom of screen
"--------------------------------------------------------------------
Bundle 'bling/vim-airline'  
Bundle 'vim-airline/vim-airline-themes'

"--------------------------------------------------------------------
" Fancy vim startup window
"--------------------------------------------------------------------
Plugin 'mhinz/vim-startify'

call vundle#end()            



"--------------------------------------------------------------------
" Editor settings
"--------------------------------------------------------------------
filetype plugin indent on
syntax on 
syntax enable

let g:indentLine_color_term = 239

let g:netrw_list_hide= '.*\.swp$,.*\.pyc,ENV,.git/,.*\.map'

" Ctrlp.vim {{{
let g:ctrlp_custom_ignore = '\v[\/](node_modules|plugins|platform|lib|library|bin|bower_components|target|dist|db)|(\.(swp|tmp|ico|git|svn|png|jpg))$'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_clear_cache_on_exit = 0 " Do not clear filenames cache, to improve CtrlP startup
let g:ctrlp_match_window_bottom = 0 " Show at top of window
let g:ctrlp_max_files = 0 " Set no file limit, we are building a big project
let g:ctrlp_switch_buffer = 'Et' " Jump to tab AND buffer if already open
let g:ctrlp_open_new_file = 'r' " Open newly created files in the current window
let g:ctrlp_open_multiple_files = 'ij' " Open multiple files in hidden buffers, and jump to the first one
" }}}

" Override netrw settings to show line numbers
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'

let g:SuperTabDefaultCompletionType = "<c-n>"

set incsearch
set background=dark
colorscheme material

"--------------------------------------------------------------------
"  Vim airline config
"--------------------------------------------------------------------
function! AirlineInit()
	AirlineToggleWhitespace
	AirlineTheme kalisi
endfunction
autocmd VimEnter * call AirlineInit()
" For vim airline to always show a status bar 
set laststatus=2


"--------------------------------------------------------------------
"  Formatting configs
"--------------------------------------------------------------------
set clipboard+=unnamed
set noswapfile                      
set history=50 
set undolevels=50
set bs=2
set tabstop=2
set shiftwidth=2
set expandtab 
" show line number
" set ruler
set showcmd
set autowrite
set wildmenu            " Enable commandline complete
set noeol
set binary              " Done add empty new lines
set modeline            " Respect modeline in files
set modelines=4
set title               "Show the filename in the window titlebar
set splitbelow          " Split default right bottom
set splitright
set autoindent
set visualbell		
set noerrorbells	
set wildmode=list:longest,list:full		" Show list of files instead of autocomplete
set number              " Show line number
set cursorline          " Highlight current line
set ignorecase          " Ignore case of searches
set smartcase
set incsearch           " Highlight dynamically as pattern is typed


"--------------------------------------------------------------------
"  Ack Vim config
"--------------------------------------------------------------------
let g:ackprg = 'ag --nogroup --nocolor --column'


"--------------------------------------------------------------------
" Configure Syntastic
"--------------------------------------------------------------------

map <C-l> :SyntasticCheck<cr>
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_error_symbol = "âœ•"
let g:syntastic_warning_symbol = "!!"

"--------------------------------------------------------------------
" Customize :find
" Put all files into find's buffer for fuzzy search 
"--------------------------------------------------------------------
set path+=**

"--------------------------------------------------------------------
"  Key binding
"--------------------------------------------------------------------

nnoremap <c-p> :CtrlP<CR>                 

" Bind better moving between panes
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


if !has('nvim')
  set ttymouse=xterm2
endif

" set term=screen-256color
set t_Co=256

"" Configure ejs syntax highlight
" au BufNewFile,BufRead *.ejs set filetype=html
"
" Disable ~ when inside tmux, as Ctrl + PageUp/Down are translated to 5~
if &term =~ '^screen'
  map ~ <Nop>
endif


function! CPPSET()
  let g:syntastic_cpp_compiler = 'clang++'
  let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
  set makeprg=if\ \[\ -f\ \"Makefile\"\ \];then\ make\ $*;else\ if\ \[\ -f\ \"makefile\"\ \];then\ make\ $*;else\ g++\ -std=c++11\ -O2\ -o\ %<.out\ %;fi;fi
  set cindent
  set nowrap
endfunction

function! VIMSET()
  set tabstop=2
  set shiftwidth=2
  set expandtab 
endfunction

function! TYPESCRIPTSET()
  let g:typescript_indent_disable = 1
endfunction

let g:jsx_ext_required = 0

function! JAVASCRIPTSET() 
  set tabstop=2
  set shiftwidth=2
  set expandtab 
  "Syntax highlight htmlcss
  let g:javascript_enable_domhtmlcss = 1
  let g:javascript_ignore_javaScriptdoc = 1
  let g:syntastic_javascript_checkers = ['eslint']
endfunction

function! GOSET()
  " format with goimports instead of gofmt
  let g:go_fmt_command = "goimports"
endfunction

let g:loaded_python_provider=1
let g:loaded_python3_provider=1
let g:javascript_plugin_flow = 1
let g:flow#autoclose = 1 

let g:mta_filetypes = {
    \'javascript.jsx': 1,
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
		\}

"Over write prettier rules
let g:prettier#config#bracket_spacing = 'true' 

"--------------------------------------------------------------------
" Match tags always
"--------------------------------------------------------------------
let g:mta_use_matchparen_group = 1
let g:mta_set_default_matchtag_color = 0
hi MatchParen ctermfg=white ctermbg=lightblue guifg=white guibg=lightblue



"--------------------------------------------------------------------
" Load configurations for each file types
"--------------------------------------------------------------------
autocmd FileType cc         call CPPSET()
autocmd FileType cpp        call CPPSET()
autocmd FileType vim				call VIMSET()
autocmd FileType typescript call TYPESCRIPTSET()
autocmd FileType javascript call JAVASCRIPTSET()
autocmd FileType go					call GOSET()