"--------------------------------------------------------------------
" Nhat Dao ' s Vim config
"--------------------------------------------------------------------

set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin() 

Plugin 'VundleVim/Vundle.vim'
Plugin 'leafgarland/typescript-vim'
"--------------------------------------------------------------------
"Interact with Git within vim, :Gstatus ...
"--------------------------------------------------------------------
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-vinegar'
"--------------------------------------------------------------------
"Surround tag utility
"--------------------------------------------------------------------
Plugin 'tpope/vim-surround' 
Plugin 'junegunn/vim-emoji'
Plugin 'Yggdroot/indentLine'
" Plugin 'flowtype/vim-flow'
Plugin 'prettier/vim-prettier', {
	\ 'do': 'yarn install',
	\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql'] }
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'elzr/vim-json'
"--------------------------------------------------------------------
" Comment a block helper
" usage:
" > Comment out a line: gcc
" > Comment out a block: gcap
" > Comment out selected: gc
"--------------------------------------------------------------------
Plugin 'tomtom/tcomment_vim'
Plugin 'mileszs/ack.vim'
Plugin 'wincent/ferret' "Ack enhancement
Bundle 'tpope/vim-repeat'

"--------------------------------------------------------------------
"Async Make
"--------------------------------------------------------------------
Bundle "tpope/vim-dispatch"

" Reveal current file in OS finder
Bundle "henrik/vim-reveal-in-finder"
Plugin 'kien/ctrlp.vim'                     
"--------------------------------------------------------------------
" Always highlight enclosing tags
" "--------------------------------------------------------------------
Plugin 'tmhedberg/matchit'

"--------------------------------------------------------------------
" Display a nerd tree on the left side
" :NerdTree
"--------------------------------------------------------------------
Plugin 'scrooloose/nerdtree'

Plugin 'Raimondi/delimitMate'

Plugin 'benmills/vimux'
Plugin 'fatih/vim-go', { 'do': ':GoInstallBinaries' }


"--------------------------------------------------------------------
" Syntax checking
"--------------------------------------------------------------------
" Plugin 'w0rp/ale'
Plugin 'millermedeiros/vim-esformatter'
Plugin 'christoomey/vim-tmux-navigator'    

"--------------------------------------------------------------------
" Javascript syntax enforcement
"--------------------------------------------------------------------
Plugin 'pangloss/vim-javascript'
Plugin 'AndrewRadev/splitjoin.vim'
"--------------------------------------------------------------------
" jsx syntax enforcement
"--------------------------------------------------------------------
Plugin 'mxw/vim-jsx'

"--------------------------------------------------------------------
" Colors and themese
"--------------------------------------------------------------------
Bundle 'morhetz/gruvbox'
Bundle 'crusoexia/vim-monokai'
Bundle 'altercation/vim-colors-solarized'
Bundle 'andreypopp/vim-colors-plain'
Bundle 'brendonrapp/smyck-vim'
"--------------------------------------------------------------------
" Display line status at the bottom of screen
"--------------------------------------------------------------------
" Bundle 'bling/vim-airline'
" Bundle 'vim-airline/vim-airline-themes'

"--------------------------------------------------------------------
" Fancy vim startup window
"--------------------------------------------------------------------
Plugin 'mhinz/vim-startify'

call vundle#end()            



"--------------------------------------------------------------------
" Editor settings
"--------------------------------------------------------------------
filetype plugin indent on
syntax on 
syntax enable

let g:netrw_list_hide= '.*\.swp$,.*\.pyc,ENV,.git/,.*\.map'

" Ctrlp.vim {{{
let g:ctrlp_custom_ignore = '\v[\/](node_modules|plugins|platform|lib|library|bin|bower_components|target|dist|db)|(\.(swp|tmp|ico|git|svn|png|jpg))$'
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_clear_cache_on_exit = 1 " Do not clear filenames cache, to improve CtrlP startup
let g:ctrlp_match_window_bottom = 0 " Show at top of window
let g:ctrlp_max_files = 0 " Set no file limit, we are building a big project
let g:ctrlp_switch_buffer = 'Et' " Jump to tab AND buffer if already open
let g:ctrlp_open_new_file = 'r' " Open newly created files in the current window
let g:ctrlp_open_multiple_files = 'ij' " Open multiple files in hidden buffers, and jump to the first one
let g:ctrlp_working_path_mode = 'ra'
" }}}

" Override netrw settings to show line numbers
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'

let g:SuperTabDefaultCompletionType = "<c-n>"

set pastetoggle=<F2>
set incsearch

set background=dark
set t_Co=256
colorscheme smyck
"--------------------------------------------------------------------
"  Vim airline config
"--------------------------------------------------------------------
" function! AirlineInit()
"   AirlineToggleWhitespace
"   AirlineTheme luna
" endfunction
" autocmd VimEnter * call AirlineInit()
" For vim airline to always show a status bar 
set laststatus=2


"--------------------------------------------------------------------
"  Formatting configs
"--------------------------------------------------------------------
set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set nobackup
set nowritebackup
set noswapfile
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set expandtab                                                " expand tabs to spaces
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=8                                                " actual tabs occupy 8 characters
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full

"--------------------------------------------------------------------
"  Ack Vim config
"--------------------------------------------------------------------
let g:ackprg = 'ag --nogroup --nocolor --column'

"--------------------------------------------------------------------
"  Ale config
"--------------------------------------------------------------------
" let g:ale_linters = {
" \   'javascript': ['eslint'],
" \   'jsx': ['eslint'],
" \}
"
" let g:ale_lint_on_enter = 0
" let g:ale_open_list = 0
" let g:ale_keep_list_window_open = 0
" let g:ale_fix_on_save = 0
" let g:ale_sign_error = emoji#for('x')
" let g:ale_sign_warning = emoji#for('thumbsdown')
" let g:airline#extensions#ale#enabled = 1
" highlight clear ALEErrorSign
" highlight clear ALEWarningSign
"
" let g:javascript_plugin_flow = 1
" let g:flow#autoclose = 1
" let g:flow#enable = 1
" let g:flow#showquickfix = 0


"--------------------------------------------------------------------
" Customize :find
" Put all files into find's buffer for fuzzy search 
"--------------------------------------------------------------------
set path+=**

"--------------------------------------------------------------------
"  Key binding
"--------------------------------------------------------------------
nnoremap <c-p> :CtrlP<CR>

if !has('nvim')
  set ttymouse=xterm2
endif

if has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

"" Configure ejs syntax highlight
" au BufNewFile,BufRead *.ejs set filetype=html
"
let g:indent_guides_auto_colors = 0

function! TYPESCRIPTSET()
  let g:typescript_indent_disable = 1
endfunction

let g:jsx_ext_required = 0

function! GOSET()
  " format with goimports instead of gofmt
  let g:go_fmt_command = "goimports"
endfunction

" Disable ~ when inside tmux, as Ctrl + PageUp/Down are translated to 5~
if &term =~ '^screen'
  map ~ <Nop>
endif

if $TMUX == ''
  set clipboard+=unnamed
endif


function! CPPSET()
  set makeprg=if\ \[\ -f\ \"Makefile\"\ \];then\ make\ $*;else\ if\ \[\ -f\ \"makefile\"\ \];then\ make\ $*;else\ g++\ -std=c++11\ -O2\ -o\ %<.out\ %;fi;fi
endfunction

let g:mta_filetypes = {
      \'javascript.jsx': 1,
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'jinja' : 1,
      \}

"Over write prettier rules
let g:prettier#config#bracket_spacing = 'true'
"--------------------------------------------------------------------
" Match tags always
"--------------------------------------------------------------------
let g:mta_use_matchparen_group = 1
let g:mta_set_default_matchtag_color = 0
hi MatchParen ctermfg=white ctermbg=lightblue guifg=white guibg=lightblue

"--------------------------------------------------------------------
" Load configurations for each file types
"--------------------------------------------------------------------
autocmd FileType cc         call CPPSET()
autocmd FileType cpp        call CPPSET()
autocmd FileType typescript call TYPESCRIPTSET()
autocmd FileType go					call GOSET()
